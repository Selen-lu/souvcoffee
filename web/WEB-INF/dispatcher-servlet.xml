<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">




    <!-- 어노테이션 기반으로 동작하도록 설정 추가 및 @RestController 값 반환시 한글 처리-->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class ="org.springframework.http.converter.StringHttpMessageConverter">
            <property name="supportedMediaTypes">
                <list>
                    <value>text/html;charset=UTF-8</value>
                </list>
            </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>



<!--
 base-package의 패키지이름을 기준으로 스캔, 빈 자동생성, 애노테이션-와이어링 자동 연결한다
@Component도 읽어줌 (@annotation-config는 인식못하지만 여기는 패키지부터 읽으므로 그때 객체가 만들어짐)
만약 패키지명이 달라서 검색하기 어렵다면 , < 쓰고 풀 패키지명 써주면 된다.

ex) 두개의 패키지를 스캔
<context:component-scan base-package="MM.com.company.souvcoffee, MS.com.company.souvcoffee"/> <- 한쌍의 큰 따옴표 안에 패키지 두개 들어있음
-->
        <context:component-scan base-package="com.company.souvcoffee"/>
    <!--이 xml 파일을 => 자바 설정파일로 변경 시
    자바파일 생성 후 클래스 위에
    beans xmlns 부분을 => @Configration
     context:component-scan base-package => @ComponentScan("com.company.souvcoffee")라고 적어주면 된다

     context:component-scan base-package의 패키지가 2개 이상이라면
      @ComponentScan({"MM.com.company.souvcoffee" , "MS.com.company.souvcoffee"})<-배열로 처리 , 두쌍의 큰 따옴표 안에 패키지 각각  들어있음
     -->




    <!-- 정적소스
    webapp
        /resources
           /css
           /font
           /js
    dispater-servlet에서 / 로 다 받는데  /resources/** 로 요청이오면  /resources/로 매핑
    경로에 대한 alias같은거라고 생각 / /resources/**오면 /resources/로 사용

    /resources/** 로 들어오는 모든 요청은 ${webapproot}/resources/ 로 모두 매핑시켜버리겠다는 설정

    -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <!-- View Resolver 설정, views 폴더 생성해야된다. -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>



</beans>